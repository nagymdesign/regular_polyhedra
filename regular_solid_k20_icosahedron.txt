#Regular icosahedron, written with chatgpt on 24.10.06.

import bpy
import bmesh
from math import sqrt

# Function to create an icosahedron mesh
def create_icosahedron_mesh(name, radius):
    # Create a new mesh
    mesh = bpy.data.meshes.new(name)
    obj = bpy.data.objects.new(name, mesh)
    bpy.context.collection.objects.link(obj)
    bm = bmesh.new()

    # Golden ratio and scaling factor
    t = (1.0 + sqrt(5.0)) / 2.0

    # Normalize vertices to have a radius of 1 and then scale by 'radius'
    vertices = [
        (-1,  t,  0),
        ( 1,  t,  0),
        (-1, -t,  0),
        ( 1, -t,  0),
        ( 0, -1,  t),
        ( 0,  1,  t),
        ( 0, -1, -t),
        ( 0,  1, -t),
        ( t,  0, -1),
        ( t,  0,  1),
        (-t,  0, -1),
        (-t,  0,  1),
    ]
    # Scale the vertices
    vertices = [(v[0] * radius, v[1] * radius, v[2] * radius) for v in vertices]

    # Faces are defined by a list of tuples, each containing 3 vertex indices (triangles)
    faces = [
        (0, 11, 5), (0, 5, 1), (0, 1, 7), (0, 7, 10), (0, 10, 11),
        (1, 5, 9), (5, 11, 4), (11, 10, 2), (10, 7, 6), (7, 1, 8),
        (3, 9, 4), (3, 4, 2), (3, 2, 6), (3, 6, 8), (3, 8, 9),
        (4, 9, 5), (2, 4, 11), (6, 2, 10), (8, 6, 7), (9, 8, 1),
    ]

    # Add the vertices
    vert_indices = [bm.verts.new(v) for v in vertices]

    # Add the faces
    for face in faces:
        bm.faces.new([vert_indices[i] for i in face])

    # Finish up and write the bmesh into the mesh
    bm.to_mesh(mesh)
    bm.free()

# Delete all existing mesh objects
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.object.select_by_type(type='MESH')
bpy.ops.object.delete()

# Create the icosahedron with radius 1
create_icosahedron_mesh("Icosahedron", radius=1)

# Shade smooth
bpy.context.view_layer.objects.active = bpy.data.objects['Icosahedron']
bpy.ops.object.shade_smooth()
